library(caret)
load(file="DebTrivedi.rda")
data(DebTrivedi)
35/1000
5/1000
1104.5+172/2
1-2240/2474
1-2250/2474
1-2260/2474
1-2280/2474
1-2300/2474
1-2310/2474
1-2305/2474
1-2300/2474
1-2299/2474
1-2301/2474
12*12
12*12*2
12*15*2
12*10
12*10+12*12
12*10+12*13
12*12+12*13
12*12+12*15
8*10+8*15
35*14
35*365
35*365/2
20/25
103/354
(332/400)*100
50*30
50*20
3276.96*26
3276.96*26+30220.85
130200-(15000)-20*50-2500
130200-(15000)-20*50-2500-+35220.85
130200-(15000)-20*50-2500-35220.85
pkgs <- list("glmnet", "doParallel", "foreach", "pROC")#
lapply(pkgs, require, character.only = T)#
registerDoParallel(cores = 4)
library(pROC)
pkgs <- list("glmnet", "doParallel", "foreach", "pROC")#
lapply(pkgs, require, character.only = T)#
registerDoParallel(cores = 4)
?registerDoParallel
?glm
?dgamma
library(mgcv)
?gam
?dgamma
example(glm)
y <- rgamma(10,shape=5)#
X <- cbind(1,1:10)#
fit <- glmgam.fit(X,y,trace=TRUE)
?glm
rm(list=ls());#
#
library(refitME);#
#
set.seed(2016);#
#
epsilon<-0.00001;#
B<-50;#
#
n<-1000;#
#
sigma.sq.e<-c(1,1); # True covariate sigma.#
alpha<-c(0,0);#
beta<-c(0.5,1); par.int<-2;  # c(0.5,0.5) is good!#
beta<-c(0.5,-0.25,1); par.int<-3;  # c(0.5,0.5) is good!#
#
#par.int<-"spline";#
theta<-1;#
shape<-10;#
#
if(par.int=="spline"){epsilon<-0.00001;}#
#
#family<-"gaussian";#
#family<-"binomial";#
#family<-"poisson";#
family<-"Gamma";#
#family<-"negbin";#
#
sigma.sq.u<-0.5;  # Measurement error varaince.#
x1<-rnorm(n,alpha[1],sd=sqrt(sigma.sq.e[1]));#
#
if(par.int==2){X<-cbind(rep(1,n),x1);}#
if(par.int==3){X<-cbind(rep(1,n),x1,x1^2);}#
if(par.int=="spline"){X<-NA;}#
#
w1<-x1+rnorm(n,0,sd=sqrt(sigma.sq.u));  # Add/contaminate the covariate with error.#
#
if(par.int!="spline"){eta<-X%*%beta;}#
if(par.int=="spline" && family=="gaussian"){eta<-sin(0.45*x1)-1;}#
if(par.int=="spline" && family=="binomial"){eta<-sin(0.85*x1);}#
if(par.int=="spline" && family=="poisson"){eta<-cos(2*x1)+2;}#
#
if(family=="gaussian")#
  {#
  mu_Y<-eta;#
  Y<-c(mu_Y)+rnorm(n,0,1);#
  }#
#
if(family=="binomial")#
  {#
  mu_Y<-exp(eta)/(1+exp(eta));#
  Y<-rbinom(n,1,prob=mu_Y);#
  }#
#
if(family=="poisson")#
  {#
  mu_Y<-exp(eta);#
  Y<-rpois(n,lambda=mu_Y);#
  }#
#
if(family=="Gamma")#
  {#
  y_true<-exp(eta);#
  Y<-rgamma(n,rate=shape/y_true, shape=shape);#
  }#
#
if(family=="negbin")#
  {#
  mu_Y<-exp(eta);#
  #var_true<-mu*(1+mu*(1/theta));#
  Y<-rnbinom(n,mu=mu_Y,size=theta);#
  }#
#
dat<-data.frame(cbind(Y,w1,x1));#
#
## Start fitting models here.#
#
if(par.int==2)#
  {#
  if(family=="gaussian"){mod_naiv1<-lm(Y~w1,x=TRUE,data=dat);}#
  if(family=="binomial"){mod_naiv1<-glm(Y~w1,x=TRUE,family=binomial,data=dat);}#
  if(family=="poisson"){mod_naiv1<-glm(Y~w1,x=TRUE,family=poisson,data=dat);}#
  if(family=="Gamma"){mod_naiv1<-glm(Y~w1,x=TRUE,family=Gamma(link="log"),data=dat);}#
  if(family=="negbin"){mod_naiv1<-glm.nb(Y~w1,data=dat,init.theta=theta);}#
  }#
#
if(par.int==3)#
  {#
  if(family=="gaussian"){mod_naiv1<-lm(Y~w1+I(w1^2),x=TRUE,data=dat);}#
  if(family=="binomial"){mod_naiv1<-glm(Y~w1+I(w1^2),x=TRUE,family=binomial,data=dat);}#
  if(family=="poisson"){mod_naiv1<-glm(Y~w1+I(w1^2),x=TRUE,family=poisson,data=dat);}#
  if(family=="Gamma"){mod_naiv1<-glm(Y~w1+I(w1^2),x=TRUE,family=Gamma(link="log"),data=dat);}#
  if(family=="negbin"){mod_naiv1<-glm.nb(Y~w1+I(w1^2),data=dat,init.theta=theta);}#
  }
mod_naiv1
beta
summary(mod_naiv1)
str(mod_naiv1)
library(MASS)
gamma.shape(mod_naiv1)
1/0.67961735
?gamma.shape
summary(mod_naiv1)
log(15.89481)
mod_naiv1<-glm(Y~w1+I(w1^2),x=TRUE,family=Gamma(link="log"),data=dat)
mod_naiv1<-glm(Y~x1+I(x1^2),x=TRUE,family=Gamma(link="log"),data=dat)
summary(mod_naiv1)
1/0.09872965
1/15.89481
gamma.shape(mod_naiv1)
mod_naiv1<-glm(Y~w1+I(w1^2),x=TRUE,family=Gamma(link="log"),data=dat)
gamma.shape(mod_naiv1)
summary(mod_naiv1)
1/15.89481
1104.5+207.58/2
0.5/12
0.05/12
0.05/12*250000
0.05*250000
0.5/100
0.5/100*250000
0.5/100*250000/12
01.25/100*250000/12
1.25/100*250000/12
0.5/100*250000/120
0.5/100*250000/12
1.25/100*250000/12
12+13+9
49+11+43+30
133/4
34/9
34/3
34/4
12+13+9
34/3
45*8*5
45*8*5*52
*8*5*560
60*8*5*560
(12+1+13+9)
(12+1+13+9)/4
231.5+95.3+170
7*60
4*80+3*60
3*90+4*60
73+39+13
load("Framinghamdata.RData")
dat
load("Framinghamdata.RData")
Framinghamdat
